{"version":3,"sources":["pages/Dashboard/styles.ts","assets/logo.svg","services/api.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","assets/github-background.svg","styles/global.ts","App.tsx","index.tsx"],"names":["Title","styled","h1","Form","form","props","hasError","css","shade","Repositories","div","Error","span","api","axios","create","baseURL","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositoies","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","LogoImg","alt","onSubmit","value","onChange","e","target","type","placeholder","map","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","rel","href","html_url","title","user","id","Routes","path","exact","component","createGlobalStyle","githubBackground","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cf57b4f.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  max-width: 450px;\n  line-height: 56px;\n  font-size: 48px;\n  color: #3a3a3a;\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n  display: flex;\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    border: 2px solid #fff;\n    ${(props) =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n        border-right: 0;\n      `}\n    color: #3a3a3a;\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n  button {\n    width: 210px;\n    height: 70px;\n    border-radius: 5px 0 0 5px;\n    background: #04d361;\n    color: #fff;\n    border: 0;\n    font-weight: bold;\n    transform: background-color 0.2s;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n    div {\n      margin: 0 16px;\n      flex: 1;\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n","export default __webpack_public_path__ + \"static/media/logo.469cc31b.svg\";","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com/',\n});\n\nexport default api;\n","import React, { useState, FormEvent, useEffect } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport { Title, Form, Repositories, Error } from './styles';\nimport LogoImg from '../../assets/logo.svg';\nimport api from '../../services/api';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositoies = localStorage.getItem(\n      '@GithubExplorer:repositories',\n    );\n    if (storagedRepositoies) {\n      return JSON.parse(storagedRepositoies);\n    }\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  async function HandleAddRepository(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do reposit贸rio');\n      return;\n    }\n\n    try {\n      const response = await api.get<Repository>(`repos/${newRepo}`);\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n      setNewRepo('');\n      setInputError('');\n    } catch (Err) {\n      setInputError('Erro na busca por esse reposit贸rio');\n    }\n  }\n  return (\n    <>\n      <img src={LogoImg} alt=\"Git Explorer\" />\n      <Title>Explore Reposit贸rios no Github</Title>\n\n      <Form hasError={!!inputError} onSubmit={HandleAddRepository}>\n        <input\n          value={newRepo}\n          onChange={(e) => setNewRepo(e.target.value)}\n          type=\"text\"\n          placeholder=\"Digite o nome do reposit贸rio\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n      {inputError && <Error> {inputError} </Error>}\n\n      <Repositories>\n        {repositories.map((repository) => (\n          <Link\n            key={repository.full_name}\n            to={`/repositories/${repository.full_name}`}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong> {repository.full_name} </strong>\n              <p>\n                {!repository.description\n                  ? 'no description'\n                  : repository.description}\n              </p>\n            </div>\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color 0.2s;\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n  header {\n    display: flex;\n    align-items: center;\n  }\n  img {\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n  }\n  div {\n    margin-left: 24px;\n    strong {\n      font-size: 36px;\n      color: #3d3d4d;\n    }\n    p {\n      font-size: 18px;\n      color: #737380;\n      margin-top: 4px;\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport LogoImg from '../../assets/logo.svg';\nimport { Header, Issues, RepositoryInfo } from './styles';\nimport api from '../../services/api';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issues {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\n\nconst Repository: React.FC = () => {\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issues[]>([]);\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then((response) => {\n      setRepository(response.data);\n    });\n\n    api.get(`repos/${params.repository}/issues`).then((response) => {\n      setIssues(response.data);\n    });\n    /* async function loadData():Promise<void> {\n\n     const [repository,issues] = await Promise.all([\n        api.get(`repos/${params.repository}`),\n        api.get(`repos/${params.repository}/issues`)\n      ])\n      console.log(repository);\n      console.log(issues);\n\n    }\n    loadData(); */\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={LogoImg} alt=\"Git Explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n      {repository && (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n      <Issues>\n        {issues.map((issue) => (\n          <a\n            key={issue.id}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href={issue.html_url}\n          >\n            <div>\n              <strong> {issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","export default __webpack_public_path__ + \"static/media/github-background.7fa45dda.svg\";","import { createGlobalStyle } from 'styled-components';\nimport githubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n* {\n  margin: 0;\n  padding: 0;\n  outline: 0;\n  box-sizing: border-box;\n}\nbody {\n  background:#F0F0F5 url(${githubBackground}) no-repeat 70% top;\n  -webkit-font-font-smooth: antialiased;\n}\nbody, input, button {\n  font: 16px Roboto, sans-serif;\n}\n#root {\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 40px 20px;\n}\nbutton {\n  cursor: pointer;\n}\n`;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './routes';\nimport GlobalStyle from './styles/global';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n/* reportWebVitals(); */\n"],"sourceRoot":""}